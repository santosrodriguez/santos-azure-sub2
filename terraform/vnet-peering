##################################################
# PROVIDER BLOCK DEFINITIONS                     #
# Individual provider blocks for local and       #
# CS-PNP-CommonServicesInfra subscriptions for   #
# peering to PaloEW VNETs                        #
##################################################

provider "azurerm" {
  features {
    key_vault {
      purge_soft_delete_on_destroy = true
    }
  }
  alias           = "localsubscription" # Do not modify the alias, as it will break individual resource blocks.
  subscription_id = var.subscription_id
}

provider "azurerm" {
  features {
    key_vault {
      purge_soft_delete_on_destroy = true
    }
  }
  alias           = "santos-azure-sub1" # Do not modify the alias, as it will break individual resource blocks.
  subscription_id = "2aa7f81a-c2cc-41f6-ae8e-468be407d0de"
}
/*

##################################################
# EXISTING (unmanaged) RESOURCES                 #
##################################################

data "azurerm_resource_group" "infrastructure-rg" { # Firewall Resource Group on CS-PNP-COMMONSERVICESINFRA subscription.
  name     = "infrastructure-rg"
  provider = azurerm.santos-azure-sub1
}

data "azurerm_virtual_network" "hub-vnet1" { # paloew-eastus vnet information
  provider            = azurerm.cs-pnp-commonservicesinfra
  name                = "hub-vnet1"
  resource_group_name = data.azurerm_resource_group.infrastructure-rg.name
}

*/


##################################################
# VNET1 peering - vnets in same sub      #
##################################################

resource "azurerm_virtual_network_peering" "peer-to-vnet1" {
  name = "peer-to-${var.vnet1_name}"
  resource_group_name = var.vnet2_resource_group_name
  virtual_network_name = var.vnet2_name
  remote_virtual_network_id = var.vnet1_id
  allow_virtual_network_access = var.allow_virtual_network_access_vnet2_to_vnet1
  allow_forwarded_traffic = var.allow_forwarded_traffic_vnet2_to_vnet1
  allow_gateway_transit = var.allow_gateway_transit_vnet2_to_vnet1
  use_remote_gateways = var.use_remote_gateways_vnet2_to_vnet1
  provider = azurerm.vnet2
}

resource "azurerm_virtual_network_peering" "peer-to-vnet2" {
  name = "peer-to-${var.vnet2_name}"
  resource_group_name = var.vnet1_resource_group_name
  virtual_network_name = var.vnet1_name
  remote_virtual_network_id = var.vnet2_id
  allow_virtual_network_access = var.allow_virtual_network_access_vnet1_to_vnet2
  allow_forwarded_traffic = var.allow_forwarded_traffic_vnet1_to_vnet2
  allow_gateway_transit = var.allow_gateway_transit_vnet1_to_vnet2
  use_remote_gateways = var.use_remote_gateways_vnet1_to_vnet2
  provider = azurerm.vnet1
}
 
